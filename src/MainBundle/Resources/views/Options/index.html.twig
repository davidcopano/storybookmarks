{% extends '::base.html.twig' %}

{% block title %}storybookmarks - {{ 'menu.items.options'|trans }}{% endblock %}

{% block body_class %}options{% endblock %}

{% block body %}
    {{ knp_menu_render('MainBundle:Builder:mainMenu', { 'currentClass': 'active' }) }}
    <div class="main">
        <div class="row">
            {{ include('MainBundle:Search:search.list.twig') }}
            {{ include('MainBundle:UserDropdown:user.html.twig') }}
        </div>
        <h1 class="ml-3">{{ 'menu.items.options'|trans }}</h1>
        <div class="form-container container mt-4">
            {% for message in app.flashes('success') %}
                <div class="container">
                    <div class="alert alert-success alert-dismissible fade show">
                        <button type="button" class="close" data-dismiss="alert">
                            <i class="fas fa-times"></i>
                        </button>
                        {{ message }}
                    </div>
                </div>
            {% endfor %}
            {{ form_start(form, {'attr': {'id': 'options-form'}}) }}
                <div class="form-group">
                    {{ form_widget(form.enable_multimedia, { 'attr': { 'class': 'switch vertical-align-middle mr-2' } }) }}
                    {{ form_label(form.enable_multimedia, 'options.multimedia.text'|trans, { 'label_attr': { 'class': 'form-check-label' } }) }}
                    <small class="form-text text-muted">{{ 'options.multimedia.help'|trans }}.</small>
                    <small class="form-text text-muted"><strong>{{ 'options.multimedia.help_bold'|trans }}</strong></small>
                </div>
                <div class="text-center">
                    <button type="submit" class="btn btn-primary">{{ 'generics.save'|trans }}</button>
                </div>
            {{ form_end(form) }}
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('download.js') }}"></script>
    <script>
        window.onload = () => {
            const bookmarkPublic = document.querySelectorAll('.bookmark-public');
            for (let bp of bookmarkPublic) {
                bp.addEventListener('click', function (e) {
                    e.preventDefault();
                    let path = '{{ url('bookmarks_public', {'id': 'article_id'}) }}';
                    path = path.replace('article_id', this.dataset.id);
                    copyToClipboard(path);
                    let title = '{{ 'bookmarks.copied'|trans }}';
                    $(this).attr('data-original-title', title)
                        .tooltip('show');
                });
            }

            $(bookmarkPublic).on('hidden.bs.tooltip', function () {
                $(this).attr('data-original-title', '{{ 'bookmarks.public'|trans }}');
            });

            const deleteBookmarks = document.querySelectorAll('.delete-bookmark');
            for (let db of deleteBookmarks) {
                db.addEventListener('click', function (e) {
                    e.preventDefault();
                    let path = '{{ url('bookmarks_delete', {'id': 'bookmark_id'}) }}';
                    path = path.replace('bookmark_id', this.dataset.id);

                    swal({
                        title: '{{ 'bookmarks.delete_alert.title'|trans }}',
                        text: '{{ 'bookmarks.delete_alert.text'|trans }}',
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ff1654',
                        cancelButtonColor: '#247ba0',
                        cancelButtonText: '{{ 'bookmarks.delete_alert.cancel'|trans }}',
                        confirmButtonText: '{{ 'bookmarks.delete_alert.confirm'|trans }}'
                    }).then((result) => {
                        if (result.value) {
                            location.replace(path);
                        }
                    })
                })
            }

            const searchContainer = new Vue({
                el: '#search-container',
                delimiters: ['[[', ']]'],
                data: {
                    query: undefined,
                    bookmarks: [],
                    folders: [],
                    tags: []
                },
                methods: {
                    getQueryResults: function () {
                        if (this.query) {
                            axios.get('{{ url('search_index') }}' + '?query=' + this.query)
                                .then(result => {
                                    let json = result.data;
                                    this.bookmarks = json.bookmarks;
                                    this.folders = json.folders;
                                    this.tags = json.tags;
                                })
                        }
                        else {
                            this.bookmarks = [];
                            this.folders = [];
                            this.tags = [];
                        }
                    }
                }
            });
        };
    </script>
{% endblock %}