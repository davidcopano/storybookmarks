{% extends '::base.html.twig' %}

{% block title %}storybookmarks - {{ 'menu.items.bookmarks'|trans }}{% endblock %}

{% block body_class %}bookmark-list{% endblock %}

{% block body %}
    {{ knp_menu_render('MainBundle:Builder:mainMenu', { 'currentClass': 'active' }) }}
    <div class="main">
        <div class="row">
            {{ include('MainBundle:Search:search.list.twig') }}
            {{ include('MainBundle:UserDropdown:user.html.twig') }}
        </div>
        {% for message in app.flashes('success') %}
            <div class="container">
                <div class="alert alert-success alert-dismissible fade show">
                    <button type="button" class="close" data-dismiss="alert">
                        <i class="fas fa-times"></i>
                    </button>
                    {{ message }}
                </div>
            </div>
        {% endfor %}
        <h1 class="ml-3">
            {{ 'menu.items.bookmarks'|trans }}
            <button type="button" class="btn btn-primary" id="download-bookmarks">
                <i class="fas fa-cloud-download-alt"></i>
                {{ 'bookmarks.download'|trans }}
            </button>
        </h1>
        <p class="ml-3 mt-3">
            <u>{{ 'bookmarks.help.note'|trans }}</u>:
            {{ 'bookmarks.help.text'|trans }}
        </p>
        <form class="ml-3 mt-3" action="{{ path('bookmarks_list') }}" method="get" style="max-width: 75%;" id="form_order_by">
            <div class="form-group">
                {% set orderBy = app.request.get('order_by') %}
                <label for="order_by">{{ 'bookmarks.order_by.text'|trans }}</label>
                <select name="order_by" id="order_by" class="form-control">
                    <option value="default" {% if orderBy == 'default' %}selected{% endif %}>{{ 'bookmarks.order_by.options.default'|trans }}</option>
                    <option value="oldest_to_lowest" {% if orderBy == 'oldest_to_lowest' %}selected{% endif %}>{{ 'bookmarks.order_by.options.oldest_to_newest'|trans }}</option>
                    <option value="a_to_z" {% if orderBy == 'a_to_z' %}selected{% endif %}>{{ 'bookmarks.order_by.options.a_to_z'|trans }}</option>
                    <option value="z_to_a" {% if orderBy == 'z_to_a' %}selected{% endif %}>{{ 'bookmarks.order_by.options.z_to_a'|trans }}</option>
                </select>
            </div>
        </form>
        {% if bookmarks|length > 0 %}
            <div class="row container bookmarks-container mt-4">
                {% for bookmark in bookmarks %}
                    <div class="card col-md-5 mt-3 offset-1 h-100" {% if bookmark.color is not null %}style="border: 1px solid {{ bookmark.color }}"{% endif %}>
                        <div class="card-body">
                            <h3 class="card-title">
                                {{ bookmark.title }}
                                <span class="float-right text-muted bookmark-date">
                                    {% if app.request.locale == 'es' %}
                                        {{ bookmark.createdAt | date('d/m/Y, H:i') }}
                                        {% else %}
                                        {{ bookmark.createdAt | date('Y-m-d, H:i') }}
                                    {% endif %}
                                </span>
                            </h3>
                            {% if bookmark.note is not null %}
                                <p class="card-text">{{ bookmark.note }}</p>
                            {% endif %}
                            <a href="{{ bookmark.url }}" target="_blank">{{ bookmark.url }}</a>
                            <div class="buttons-container mt-3">
                                <a href="#" class="float-right delete-bookmark ml-3" data-id="{{ bookmark.id }}">
                                    <i class="fas fa-trash-alt"></i>
                                </a>
                                <a href="{{ path('bookmarks_edit', {'id': bookmark.id}) }}" class="float-right edit-bookmark ml-3" data-id="{{ bookmark.id }}">
                                    <i class="fas fa-edit"></i>
                                </a>
                                {% if bookmark.checkValidPublic %}
                                    <a href="#" class="float-right bookmark-public" data-toggle="tooltip"
                                       title="{{ 'bookmarks.public'|trans }}" data-id="{{ bookmark.id }}">
                                        <i class="fas fa-lock-open"></i>
                                    </a>
                                {% endif %}
                            </div>
                            {% if app.user.enableMultimedia %}
                                {% if bookmark.isUrl_aImage %}
                                    <img class="img-fluid img-thumbnail mt-3" src="{{ bookmark.url }}" alt="{{ bookmark.title }} - storybookmarks" />
                                {% endif %}
                                {% if bookmark.isUrl_aVideo %}
                                    <div class="text-center">
                                        <video controls>
                                            <source src="{{ bookmark.url }}">
                                        </video>
                                    </div>
                                {% endif %}
                            {% endif %}
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <h3 class="text-center mt-4">{{ 'bookmarks.without'|trans }}</h3>
        {% endif %}
    </div>
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('download.js') }}"></script>
    <script>
        window.onload = () => {
            const bookmarkPublic = document.querySelectorAll('.bookmark-public');
            for (let bp of bookmarkPublic) {
                bp.addEventListener('click', function (e) {
                    e.preventDefault();
                    let path = '{{ url('bookmarks_public', {'id': 'article_id'}) }}';
                    path = path.replace('article_id', this.dataset.id);
                    copyToClipboard(path);
                    let title = '{{ 'bookmarks.copied'|trans }}';
                    $(this).attr('data-original-title', title)
                        .tooltip('show');
                });
            }

            $(bookmarkPublic).on('hidden.bs.tooltip', function () {
                $(this).attr('data-original-title', '{{ 'bookmarks.public'|trans }}');
            });

            const deleteBookmarks = document.querySelectorAll('.delete-bookmark');
            for(let db of deleteBookmarks) {
                db.addEventListener('click', function (e) {
                    e.preventDefault();
                    let path = '{{ url('bookmarks_delete', {'id': 'bookmark_id'}) }}';
                    path = path.replace('bookmark_id', this.dataset.id);

                    swal({
                        title: '{{ 'bookmarks.delete_alert.title'|trans }}',
                        text: '{{ 'bookmarks.delete_alert.text'|trans }}',
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ff1654',
                        cancelButtonColor: '#247ba0',
                        cancelButtonText: '{{ 'bookmarks.delete_alert.cancel'|trans }}',
                        confirmButtonText: '{{ 'bookmarks.delete_alert.confirm'|trans }}'
                    }).then((result) => {
                        if (result.value) {
                            location.replace(path);
                        }
                    })
                })
            }

            const searchContainer = new Vue({
                el: '#search-container',
                delimiters: ['[[', ']]'],
                data: {
                    query: undefined,
                    bookmarks: [],
                    folders: [],
                    tags: []
                },
                methods: {
                    getQueryResults: function () {
                        if (this.query) {
                            axios.get('{{ url('search_index') }}' + '?query=' + this.query)
                                .then(result => {
                                    let json = result.data;
                                    this.bookmarks = json.bookmarks;
                                    this.folders = json.folders;
                                    this.tags = json.tags;
                                })
                        }
                        else {
                            this.bookmarks = [];
                            this.folders = [];
                            this.tags = [];
                        }
                    }
                }
            });

            const downloadBookmarks = document.getElementById('download-bookmarks');
            downloadBookmarks.addEventListener('click', () => {
                axios.get('{{ path('bookmarks_download') }}')
                    .then(result => {
                        let html = result.data;
                        download(html, 'bookmarks.html', undefined);
                    })
            })
        };

        const select_formOrderBy = document.querySelector('#form_order_by select');
        select_formOrderBy.addEventListener('change', () => {
            document.getElementById('form_order_by').submit();
        });
    </script>
{% endblock %}