{% extends '::base.html.twig' %}

{% block title %}storybookmarks - {{ bookmark.title }}{% endblock %}

{% block body %}
    {{ knp_menu_render('mainMenu') }}
    <div class="main">
        <div class="row">
            {{ include('MainBundle:Search:search.list.twig') }}
            {{ include('MainBundle:UserDropdown:user.html.twig') }}
        </div>
        <h1 class="text-center">{{ bookmark.title }}</h1>
        <div class="form-container container pb-5">
            {{ form_start(form, { 'attr': { 'id': 'new-bookmark-form' } }) }}
            <div class="form-group">
                {{ form_label(form.title, 'new_bookmark.fields.title'|trans) }}
                {{ form_widget(form.title, { 'attr': { 'class': 'form-control' }, 'value': bookmark.title }) }}
            </div>
            <div class="form-group">
                {{ form_label(form.url, 'new_bookmark.fields.url'|trans) }}
                {{ form_widget(form.url, { 'attr': { 'class': 'form-control' }, 'value': bookmark.url }) }}
            </div>
            <div class="form-group">
                {{ form_label(form.color, 'new_bookmark.fields.color'|trans) }}
                {{ form_widget(form.color, { 'attr': { 'class': 'form-control jscolor', 'value': bookmark.color } }) }}
            </div>
            <div class="form-group">
                {{ form_label(form.note, 'new_bookmark.fields.note'|trans) }}
                {{ form_widget(form.note, { 'attr': { 'class': 'form-control' , 'value': bookmark.note } }) }}
            </div>
            <div class="form-group">
                {{ form_label(form.tag, 'new_bookmark.fields.tags'|trans) }}
                {{ form_widget(form.tag, { 'attr': { 'class': 'form-control' }, 'value': bookmark.tag }) }}
            </div>
            <div class="form-group">
                {{ form_label(form.folder, 'new_bookmark.fields.folder'|trans) }}
                {{ form_widget(form.folder, { 'attr': { 'class': 'form-control' }, 'value': bookmark.folder }) }}
            </div>
            <div class="form-group">
                {{ form_widget(form.public, { 'attr': { 'class': 'switch vertical-align-middle mr-2', 'checked': bookmark.public } }) }}
                {{ form_label(form.public, 'new_bookmark.fields.public'|trans, { 'attr': { 'class': 'form-check-label' } }) }}
            </div>
            <div class="expiration-date form-group d-none">
                {{ form_label(form.expirationDate, 'new_bookmark.fields.exp_date'|trans) }}
                {{ form_widget(form.expirationDate) }}
            </div>
            <div class="text-center pb-3">
                <button type="submit" class="btn btn-primary">{{ 'generics.save'|trans }}</button>
            </div>
            {{ form_end(form) }}
            <div class="text-center pb-3">
                <a href="#" class="float-right btn btn-danger delete-bookmark ml-3 mr-3 mb-4" data-id="{{ bookmark.id }}">
                    <i class="fas fa-trash-alt"></i>
                    {{ 'bookmarks.delete'|trans }}
                </a>
            </div>
        </div>
    </div>
    <script src="{{ asset('jscolor.js') }}"></script>
    <script>
        window.onload = () => {
            const db = document.querySelector('.delete-bookmark');
            if(db) {
                db.addEventListener('click', function (e) {
                    e.preventDefault();
                    let path = '{{ url('bookmarks_delete', {'id': 'bookmark_id'}) }}';
                    path = path.replace('bookmark_id', this.dataset.id);

                    Swal.fire({
                        title: '{{ 'bookmarks.delete_alert.title'|trans }}',
                        text: '{{ 'bookmarks.delete_alert.text'|trans }}',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#ff1654',
                        cancelButtonColor: '#247ba0',
                        cancelButtonText: '{{ 'bookmarks.delete_alert.cancel'|trans }}',
                        confirmButtonText: '{{ 'bookmarks.delete_alert.confirm'|trans }}'
                    }).then((result) => {
                        if (result.value) {
                            location.replace(path);
                        }
                    })
                })
            }

            const publicBookmark = document.querySelector('#new-bookmark-form input[type="checkbox"]');

            if(publicBookmark.checked) {
                showExpirationDate();
            }
            publicBookmark.addEventListener('change', (event) => {
                let isChecked = event.target.checked;

                if(isChecked) {
                    showExpirationDate();
                }
                else {
                    hideExpirationDate();
                }
            });

            const searchContainer = new Vue({
                el: '#search-container',
                delimiters: ['[[', ']]'],
                data: {
                    query: undefined,
                    bookmarks: [],
                    folders: [],
                    tags: []
                },
                methods: {
                    getQueryResults: function () {
                        if (this.query) {
                            axios.get('{{ url('search_index') }}' + '?query=' + this.query)
                                .then(result => {
                                    let json = result.data;
                                    this.bookmarks = json.bookmarks;
                                    this.folders = json.folders;
                                    this.tags = json.tags;
                                })
                        }
                        else {
                            this.bookmarks = [];
                            this.folders = [];
                            this.tags = [];
                        }
                    }
                }
            });
            const newBookmarkForm = document.getElementById('new-bookmark-form');
            newBookmarkForm.addEventListener('submit', () => {
                document.getElementById('mainbundle_bookmark_color').value = '#' + document.getElementById('mainbundle_bookmark_color').value;
            });
        };

        function showExpirationDate() {
            const expirationDate = document.querySelector('.expiration-date');
            if(expirationDate.classList.contains('d-none')) {
                expirationDate.classList.remove('d-none');
            }
        }

        function hideExpirationDate() {
            const expirationDate = document.querySelector('.expiration-date');
            if(!expirationDate.classList.contains('d-none')) {
                expirationDate.classList.add('d-none');
            }
        }
    </script>
{% endblock %}